"0","# create a feature set"
"0","Fset <- as.tibble(matrix(data=NA,"
"0","                         nrow=nrow(data_agg),"
"0","                         ncol=FEATURE_COUNT)) %>%"
"0","  bind_cols(data_agg[,1:2], .,data_agg[,""mood""])"
"0","# store and rename feature names"
"0","features <- sprintf(""F%s"", 1:(length(Fset)-3))"
"0","feature_interp <- paste(""5d"", colnames(data_agg)[3:21], sep = ""."")"
"0","colnames(Fset)[3:length(Fset)] <- c(features, ""target"")"
"0","# Data imputation via the mean"
"0","data_missing <- data_agg"
"0","for (i in 4:length(data_agg)) {"
"0","data_agg[i] <-  data_agg[[i]] %>% "
"0","    replace_na(mean(data_agg[[i]], na.rm=TRUE)) "
"0","}"
"0","# populate cells with 5-day estimates of each variable"
"0","attach(data_agg)"
"0","for (patient in levels(id)) {"
"0","  for(i in (6:nrow(data_agg[id==patient,]))) {"
"0","    window <- ((i-PREDICTION_WINDOW):(i-1)) + (match(patient,id)-1)"
"0","    for (k in (3:21)) {"
"0","      if (k<7) Fset[(i-1+match(patient, data_agg$id)),k]  <- mean(pull(data_agg[window,k]), na.rm = TRUE)"
"0","      if (k>6) Fset[(i-1+match(patient, data_agg$id)),k]  <- sum(pull(data_agg[window,k]), na.rm = TRUE)"
"0","    }"
"0","  }"
"0","}"
"0","detach(data_agg)"
"0","# drop missing value rows after imputation (buggy?)"
"0","Fset <- Fset %>% drop_na()"
"0","# Feature transformation"
"0","#describe(Fset)"
"0","## standardized data"
"0","preprocessParams.std <- preProcess(Fset, method=c(""center"", ""scale""))"
"0","Fset.std <- Fset %>% "
"0","  predict(preprocessParams.std, .) %>%"
"0","  {bind_cols((.[1:(length(.)-1)]),Fset[,""target""])}"
"0","#describe(Fset.std)"
"0","## normalized data"
"0","preprocessParams.nrm <- preProcess(Fset, method=c(""range""))"
"0","Fset.nrm <- Fset %>%"
"0","  predict(preprocessParams.nrm, .) %>%"
"0","  {bind_cols(.[1:(length(Fset)-1)], Fset[,""target""])}"
"0","#describe(Fset.nrm)"
"0","  "
"0","## mixed data (norm sumvars, stand contvars, do BoxCox?"
"0","Fset.mix <- bind_cols(Fset.std[1:4], Fset.nrm[5:length(Fset)])"
"0","#describe(Fset.mix)"
"0","#implement boxcox, etc.? More custom dataset variation"
"0","#could run PCA on these"
